[{"/Users/dayoungkim/Desktop/github/git_log/src/index.js":"1","/Users/dayoungkim/Desktop/github/git_log/src/reportWebVitals.js":"2","/Users/dayoungkim/Desktop/github/git_log/src/redux/configureStore.js":"3","/Users/dayoungkim/Desktop/github/git_log/src/shared/App.js":"4","/Users/dayoungkim/Desktop/github/git_log/src/shared/theme.js":"5","/Users/dayoungkim/Desktop/github/git_log/src/components/Header.js":"6","/Users/dayoungkim/Desktop/github/git_log/src/pages/PostList.js":"7","/Users/dayoungkim/Desktop/github/git_log/src/components/PostList/Post.js":"8","/Users/dayoungkim/Desktop/github/git_log/src/elements/index.js":"9","/Users/dayoungkim/Desktop/github/git_log/src/elements/Grid.js":"10","/Users/dayoungkim/Desktop/github/git_log/src/elements/Image.js":"11","/Users/dayoungkim/Desktop/github/git_log/src/elements/Input.js":"12","/Users/dayoungkim/Desktop/github/git_log/src/elements/Text.js":"13","/Users/dayoungkim/Desktop/github/git_log/src/components/PostList/Count.js":"14","/Users/dayoungkim/Desktop/github/git_log/src/pages/Login.js":"15","/Users/dayoungkim/Desktop/github/git_log/src/pages/Signup.js":"16","/Users/dayoungkim/Desktop/github/git_log/src/elements/Button.js":"17","/Users/dayoungkim/Desktop/github/git_log/src/redux/modules/post.js":"18","/Users/dayoungkim/Desktop/github/git_log/src/pages/PostWrite.js":"19","/Users/dayoungkim/Desktop/github/git_log/src/shared/common.js":"20","/Users/dayoungkim/Desktop/github/git_log/src/redux/modules/user.js":"21","/Users/dayoungkim/Desktop/github/git_log/src/redux/modules/image.js":"22","/Users/dayoungkim/Desktop/github/git_log/src/shared/Upload.js":"23","/Users/dayoungkim/Desktop/github/git_log/src/components/PostList/CommentItem.js":"24"},{"size":733,"mtime":1618032079047,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":1617946309585,"results":"27","hashOfConfig":"26"},{"size":1209,"mtime":1618586542927,"results":"28","hashOfConfig":"26"},{"size":1946,"mtime":1618586591438,"results":"29","hashOfConfig":"26"},{"size":1236,"mtime":1618215535610,"results":"30","hashOfConfig":"26"},{"size":1054,"mtime":1618418648716,"results":"31","hashOfConfig":"26"},{"size":839,"mtime":1618548661658,"results":"32","hashOfConfig":"26"},{"size":3652,"mtime":1618547254978,"results":"33","hashOfConfig":"26"},{"size":188,"mtime":1618237352607,"results":"34","hashOfConfig":"26"},{"size":1249,"mtime":1618411389820,"results":"35","hashOfConfig":"26"},{"size":5210,"mtime":1618237352605,"results":"36","hashOfConfig":"26"},{"size":2140,"mtime":1618409644198,"results":"37","hashOfConfig":"26"},{"size":691,"mtime":1618237352606,"results":"38","hashOfConfig":"26"},{"size":1043,"mtime":1618468576717,"results":"39","hashOfConfig":"26"},{"size":2250,"mtime":1618418648716,"results":"40","hashOfConfig":"26"},{"size":10910,"mtime":1618418648716,"results":"41","hashOfConfig":"26"},{"size":1318,"mtime":1618409644198,"results":"42","hashOfConfig":"26"},{"size":4424,"mtime":1618580514543,"results":"43","hashOfConfig":"26"},{"size":4360,"mtime":1618580522013,"results":"44","hashOfConfig":"26"},{"size":669,"mtime":1618409644201,"results":"45","hashOfConfig":"26"},{"size":1263,"mtime":1618454059132,"results":"46","hashOfConfig":"26"},{"size":1258,"mtime":1618470435721,"results":"47","hashOfConfig":"26"},{"size":926,"mtime":1618567244699,"results":"48","hashOfConfig":"26"},{"size":911,"mtime":1618547211866,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1v1brg7",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"52"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"52"},"/Users/dayoungkim/Desktop/github/git_log/src/index.js",[],["112","113"],"/Users/dayoungkim/Desktop/github/git_log/src/reportWebVitals.js",[],"/Users/dayoungkim/Desktop/github/git_log/src/redux/configureStore.js",[],"/Users/dayoungkim/Desktop/github/git_log/src/shared/App.js",["114","115"],"/Users/dayoungkim/Desktop/github/git_log/src/shared/theme.js",["116"],"const size = {\n    mobile: '767px',\n    tablet: '1024px',\n    desktop: '1025px'\n  };\n\n  const theme = {\n    responsiveContainer: `\n    @media (max-width: 1919px) {\n      width: 1376px;\n    }\n    @media (max-width: 1440px) {\n      width: 1280px;\n    }\n    @media (max-width: 1312px) {\n      width: 912px;\n    }\n    @media (max-width: 944px) {\n      width: calc(100% - 2rem);\n    }\n    @media (max-width: 767px) {\n      width: calc(100% - 2rem);\n    }\n    width: 1728px;\n    margin-left: auto;\n    margin-right: auto;\n    `,\n\n    main_color: 'rgb(255, 82, 82)',\n    main_white: '#ffffff',\n    main_navy: '#24292e ',\n    main_bg_color: '#f7f8f9',\n    gray: '#adb5bd',\n    post_bg: '#f1f3f5',\n    black: '#343a40',\n    mobile: `(max-width: ${size.mobile})`,\n    tablet: `(max-width: ${size.tablet})`,\n    desktop: `(min-width: ${size.desktop})`,\n    flex_column:\n      'display: flex; flex-direction:column; align-items: center; justify-content: space-between; ',\n    flex_row:\n      'display: flex; align-items: center; justify-content: space-between;',\n    default_width:\n      'width:100vw; max-width:768px; box-sizing:border-box; padding:0 1rem',\n    max_width: `max-width:768px`,\n    border_box: `box-sizing:border-box`,\n\n\n    \n  };\n  ","/Users/dayoungkim/Desktop/github/git_log/src/components/Header.js",["117","118"],"import React from 'react';\nimport { Grid, Text, Image, Button } from '../elements';\nimport {AiFillGithub} from 'react-icons/ai';\n\nimport styled from 'styled-components';\n\nconst Header = () => {\n    return (\n        <Grid is_flex>\n            <Logo>\n                <AiFillGithub/> Git_log\n            </Logo>\n            {/*변경 예정입니다 */}\n            <HeaderBtns className=\"login\">\n                <Button width=\"50%\" margin=\"10px 10px 10px 0\" alt=\"회원가입\" \n                radius=\"8px\" size=\"0.9vw\"  color=\"white\">SignUp</Button>\n                <Button width=\"50%\" margin=\"10px 0 10px 10px\" alt=\"로그인\" \n                radius=\"8px\" size=\"0.9vw\" bg=\"#ffffff\" color=\"#24292e\">Login</Button>\n            </HeaderBtns>\n        </Grid>\n        \n        \n    );\n};\n\nconst Logo = styled.div`\n    margin: 20px;\n    width: 50%;\n    font-weight: 600;\n    font-size: 1.8vw;\n\n`;\n\nconst HeaderBtns = styled.div`\n    width: 30%;\n    display: flex;\n    justify-content: space-evenly;\n    width:10%;\n    margin: 10px;\n\n`;\n\nexport default Header;","/Users/dayoungkim/Desktop/github/git_log/src/pages/PostList.js",["119","120","121","122"],"import React from \"react\";\nimport styled from \"styled-components\"; \n\nimport { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\n\nimport Post from \"../components/PostList/Post\"\n\n\nconst PostList = (props) => {\n    const dispatch = useDispatch();\n    const post_list = useSelector((state) => state.post.list);\n\n    // 본인만 게시글 수정 기능 만들 때 사용\n\n    console.log(post_list);\n   \n\n    React.useEffect(() => {\n            dispatch(postActions.getPostAPI());\n    }, []);\n\n    return (\n        <React.Fragment>\n            {post_list.map((p, idx) => {\n                 return <Post key={p.id} {...p}/>\n            })}\n            {/* <Post/> */}\n        </React.Fragment>\n        )\n}\n\nexport default PostList;","/Users/dayoungkim/Desktop/github/git_log/src/components/PostList/Post.js",["123","124","125","126","127","128","129","130"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { Grid, Text } from \"../../elements\";\n\nimport CommentItem from \"./CommentItem\";\nimport Count from \"./Count\";\n\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport post, { actionCreators as postActions } from \"../../redux/modules/post\";\n\nimport heart from \"../../static/heart.svg\";\nimport comment from \"../../static/comment.svg\";\n\n\nconst Post = (props) => {\n\n\n  return (\n    <React.Fragment>\n      <PostContainer>\n        <PostBody1 src={props.imgUrl}>\n          <img width=\"100%\" height=\"auto\" src={props.imageUrl} />\n        </PostBody1>\n\n        <PostBody2>\n          <Body1Writer>\n            <Grid flex margin=\"12px 0px\">\n              <ProfileImg src={props.writerProfile} />\n              <Text bold margin=\"0px\">\n                {props.writerNickname}\n              </Text>\n            </Grid>\n          </Body1Writer>\n\n          <Body2Contents>\n            <Text margin=\"0px\">{props.content}</Text>\n            <Text size=\"8pt\" color=\"grey\" margin=\"1px\">\n              {props.createdAt}\n            </Text>\n          </Body2Contents>\n\n          <Body3CommentList>\n         \n              <CommentItem />\n          \n          </Body3CommentList>\n\n          <Body4Count>\n            <Icon src={heart} />\n            <Text blod margin=\"0px 5px 0px 2px\">\n              {props.heartCnt}\n            </Text>\n            <Icon src={comment} />\n            <Text blod margin=\"0px 5px 0px 2px\">\n              {props.commentCnt}\n            </Text>\n          </Body4Count>\n\n          <Body5CommentWrite>\n            <CommentInput placeholder=\"댓글 달기\" />\n            <CommentBtn>게시</CommentBtn>\n          </Body5CommentWrite>\n        </PostBody2>\n      </PostContainer>\n    </React.Fragment>\n  );\n};\n\n\nconst PostContainer = styled.div`\n  width: 100%;\n  margin: auto;\n  margin-bottom: 30px;\n  border: 1.5px solid #eee;\n  box-sizing: border-box;\n  display: flex;\n  position: relative;\n  top: 50px;\n  \n`;\n\nconst PostBody1 = styled.div`\n  width: 60%;\n  height: auto;\n  aspect-ratio: 1/1;\n  object-fit: cover;\n  object-position: 50% 50%;\n  background-image: url(\"${(props) => props.src}\");\n  background-size: cover;\n  margin: auto;\n  box-sizing: border-box;\n`;\n\nconst PostBody2 = styled.div`\n  width: 40%;\n  box-sizing: border-box;\n  border-left: 1.5px solid #eee;\n`;\n\nconst Body1Writer = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  height: 10%;\n  padding-left: 10px;\n`;\n\nconst Body2Contents = styled.div`\n  box-sizing: border-box;\n  border-bottom: 1.5px solid #eee;\n  width: 100%;\n  height: 20%;\n  overflow: hidden;\n  padding-left: 10px;\n`;\n\nconst Body3CommentList = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  height: 52%;\n  overflow: hidden;\n  padding-left: 10px;\n`;\n\nconst Body4Count = styled.div`\n  box-sizing: border-box;\n  border-top: 1.5px solid #eee;\n  width: 100%;\n  height: 7%;\n  align-items: center;\n  display: flex;\n  padding: 13px 10px 9px 10px;\n`;\n\nconst Body5CommentWrite = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  height: 8%;\n  display: flex;\n  justify-content: space-between;\n  padding: 9px 10px 12px 10px;\n`;\n\nconst ProfileImg = styled.img`\n  width: 9%;\n  aspect-ratio: 1/1;\n  border-radius: 100px;\n  background-image: url(\"${(props) => props.src}\");\n  margin-right: 5px;\n`;\n\nconst Icon = styled.img`\n  margin: 0px 5px 0px 5px;\n  width: 4%;\n`;\n\nconst CommentInput = styled.input`\n  outline: none;\n  border: none;\n  width: 85%;\n`;\n\nconst CommentBtn = styled.button`\n  background-color: white;\n  outline: none;\n  border: none;\n  color: grey;\n`;\n\nexport default Post;\n","/Users/dayoungkim/Desktop/github/git_log/src/elements/index.js",[],"/Users/dayoungkim/Desktop/github/git_log/src/elements/Grid.js",[],"/Users/dayoungkim/Desktop/github/git_log/src/elements/Image.js",[],"/Users/dayoungkim/Desktop/github/git_log/src/elements/Input.js",[],"/Users/dayoungkim/Desktop/github/git_log/src/elements/Text.js",[],"/Users/dayoungkim/Desktop/github/git_log/src/components/PostList/Count.js",[],"/Users/dayoungkim/Desktop/github/git_log/src/pages/Login.js",["131"],"import React from 'react';\nimport styled from 'styled-components';\n\nimport {Grid, Text, Button, Input} from '../elements/index';\n\nimport {history} from '../redux/configureStore';\n\nconst Login = () => {\n    return (\n        <React.Fragment>\n            <SignupWrap>\n            <SignupHeader>\n            <Grid is_flex>\n                    <Title>Login</Title>\n                </Grid>\n            </SignupHeader>\n            <SignupBody>\n            <Grid is_flex width=\"100%\" margin=\"5px 0\">\n                <Input \n                        type=\"text\" \n                        width=\"85%\" \n                        margin=\"5px 20px 5px 20px\"\n                        padding=\"12px\"\n                        placeholder=\"Email\"\n                        />\n                </Grid>\n                <Grid is_flex margin=\"5px 0\">\n                <Input \n                        type=\"text\" \n                        width=\"85%\" \n                        margin=\"5px 20px 5px 20px\"\n                        padding=\"12px\"\n                        placeholder=\"Password\"\n                        alt=\"비밀번호\"/>\n                </Grid> \n            </SignupBody>\n            <SignupBtns>\n            <Button width=\"40%\" margin=\"10px 0\" alt=\"로그인\" \n                radius=\"8px\" size=\"1.2vw\" color=\"white\"\n                >Login</Button>\n            <Button \n                width=\"40%\" margin=\"10px 0\" alt=\"회원가입\" \n                radius=\"8px\" size=\"1.2vw\"   bg=\"#ffffff\" color=\"#24292e\"\n                _onClick={() => {\n                    history.push('/signup');\n                }}\n                >SignUp</Button>\n            </SignupBtns>\n            </SignupWrap>\n        </React.Fragment>\n    );\n};\n\n\nconst SignupWrap = styled.div`\n    width: 25%;\n    margin: 8% auto;\n    padding: 8px;\n    border: 1px solid #24292e ;\n    border-radius: 8px;\n    /* background-color:#f6f8fa; */\n`;\n\n\nconst SignupHeader = styled.div`\n\n\n`;\n\nconst Title = styled.div`\n    margin: 50px auto 50px auto;\n    font-size: 2.2vw;\n    font-weight:600;\n    text-align: center;\n\n`;\n\nconst SignupBody = styled.div`\n\n`;\n\n\nconst SignupBtns = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    width:100%;\n    margin: 20px -4px;\n\n`;\n\n\nexport default Login;","/Users/dayoungkim/Desktop/github/git_log/src/pages/Signup.js",["132","133","134","135","136","137","138","139"],"import React from 'react';\nimport styled from 'styled-components';\nimport signup from '../scss/signup.css';\nimport {AiFillGithub} from 'react-icons/ai';\n\nimport {Grid, Text, Image, Input, Button } from '../elements';\nimport {nickNameCheck, pwMatch, pwContinuous, emailCheck} from '../shared/common';\n\nimport { history } from \"../redux/configureStore\";\n\nconst Signup = (props) => {\n\nconst [nickname, setNickname] = React.useState('');\nconst [nickNameDup, setNicknameDup] = React.useState(false);\nconst [pw, setPw] = React.useState('');\nconst [pwCheck, setPwCheck] = React.useState('');\nconst [email, setEmail] = React.useState('');\nconst [emailDup, setEmailDup] = React.useState(false);\nconst [github, setGithub] = React.useState('');\n\n//해당 조건 충족 여부에 따라 info 알려주기\nconst changeNickname = (e) => {\n\n    setNickname(e.target.value);\n    const nickNameInfo = document.querySelector('ul.checkNickname li:nth-child(1)');\n\n    if(!nickNameCheck(e.target.value)){\n        nickNameInfo.classList.add('error');\n        nickNameInfo.classList.remove('ok');\n    } else {\n        nickNameInfo.classList.add('ok');\n        nickNameInfo.classList.remove('error');\n    }\n}\n\nconst changePw = (e) => {\n\n    const targetPw = e.target.value;\n    setPw(targetPw);\n    const pwInfo_len = document.querySelector('ul.checkPw li:nth-child(1)');\n    const pwInfo_match = document.querySelector('ul.checkPw li:nth-child(2)');\n    const pwInfo_continuous = document.querySelector('ul.checkPw li:nth-child(3)');\n\n    if (targetPw.length < 10) {\n        pwInfo_len.classList.add('error');\n        pwInfo_len.classList.remove('ok');\n    } else {\n        pwInfo_len.classList.remove('error');\n        pwInfo_len.classList.add('ok');\n    }\n\n    if (!pwMatch(targetPw)) {\n        pwInfo_match.classList.add('error');\n        pwInfo_match.classList.remove('ok');\n    } else {\n        pwInfo_match.classList.add('ok');\n        pwInfo_match.classList.remove('error');\n    }\n\n    if (pwContinuous(targetPw)) {\n        pwInfo_continuous.classList.add('error');\n        pwInfo_continuous.classList.remove('ok');\n    } else {\n        pwInfo_continuous.classList.add('ok');\n        pwInfo_continuous.classList.remove('error');\n        }\n    }\n\n    //비밀번호 확인하기\n    //비밀번호와 일치하면 info 색깔 초록색으로 바꿔주기\n    const changePwMatch = (e) => {\n        const checkPw = e.target.value;\n        setPwCheck(checkPw);\n        const RePwInfo = document.querySelector('ul.ReCheckPw li:nth-child(1)');\n    \n        if (pw === checkPw) {\n            RePwInfo.classList.add('ok');\n            RePwInfo.classList.remove('error');\n        } else {\n            RePwInfo.classList.add('error');\n            RePwInfo.classList.remove('ok');\n        }\n    }\n\n    //github 아이디 받기 \n    // const changeGithub  = (e) => {\n    //     const checkGithub = e.target.value;\n    //     setGithub(checkGithub);\n    //     const GithubInfo = document.querySelector('ul.checkGithub li:nth-child(1)');}\n\n\n\n// signup버튼 눌렀을때 빈칸체크하기\nconst signUp = () => {\n    \n    if(nickname === '') {\n        alert('닉네임을 입력해주세요!')\n        return false;\n    }\n\n    if(email === '') {\n        alert('이메일을 입력해주세요!')\n        return false;\n    }\n\n    if (nickNameDup === false) {\n        alert('닉네임 중복확인을 해주세요!');\n        return false;\n    }\n\n        if (emailDup === false) {\n        alert('이메일 중복확인을 해주세요!');\n        return false;\n    }\n\n    if(!emailCheck(email)) {\n        alert('이메일 형식을 지켜주세요!');\n        return false;\n    }\n\n    if(github === '') {\n        alert('깃허브 아이디를 입력해주세요!')\n        return false;\n    }\n\n\n}\n\n\n\n    return (\n        <React.Fragment>\n            <SignupWrap>\n            <SignupHeader>\n                <Grid>\n                    {/* <Title>🎈Join Git_log</Title> */}\n                    <Title>Create your Account🎈</Title>\n                    {/* <subTitle>Join Git_log</subTitle> */}\n                </Grid>\n                {/* <Grid is_flex>\n                    <Button>\n                        <AiFillGithub/>Sign up with Github\n                    </Button>\n                    \n                </Grid> */}\n            </SignupHeader>\n            \n            <SignupBody>\n            <InputWrap>\n                <Grid is_flex width=\"100%\" margin=\"5px 0\">\n                <Input \n                        placeholder=\"Email\"\n                        type=\"text\" \n                        width=\"85%\" \n                        margin=\"5px 0px 5px 35px\"\n                        padding=\"12px 4px\" \n                        _onChange={(e) => {\n                            setEmail(e.target.value)}}/>\n                    <Button  \n                        width=\"20%\" \n                        margin=\"0px 30px 0px 0px\" \n                        padding=\"10px\"\n                        size=\"0.5vw\" \n                        color=\"white\"\n                        _onClick={()=>{  \n                            if(!emailCheck(email)) {\n                                alert('이메일 형식을 지켜주세요!');\n                                return false;\n                            }\n                            //checkEmailAPI(email);\n                        }}>중복확인</Button>\n                </Grid>\n                \n                <Grid is_flex width=\"100%\" margin=\"5px 0\">\n                <Input \n                        placeholder=\"Nickname\"\n                        type=\"text\" \n                        width=\"85%\" \n                        margin=\"5px 0px 5px 35px\" \n                        _onClick={() => {\n                            // console.log(\"ㅇㅇ\");\n                            document.querySelector('.checkNickname').style.display = 'block';\n                        }}\n                        _onChange={(e) => {\n                            // console.log(e.target.value);\n                            changeNickname(e);\n                        }}\n                        />\n                    <Button  \n                        width=\"20%\" \n                        margin=\"0px 30px 0px 0px\" padding=\"10px\" \n                        size=\"0.5vw\" color=\"white\"\n                        _onClick={() => {\n                            if(!nickNameCheck(nickname)){\n                                alert('닉네임은 6자 이상의 영문 혹은 영문과 숫자 조합만 가능합니다.');\n                                return false;\n                            }\n                            //checkNicknameAPI(nickname);\n                        }} >중복확인</Button>\n                </Grid>\n                <InfoUl className=\"checkNickname\">\n                    <li>6자 이상의 영문 혹은 영문과 숫자를 조합 </li>\n                    <li>닉네임 중복확인</li>\n                </InfoUl> \n                <Grid is_flex margin=\"5px auto\">\n                <Input  \n                        placeholder=\"PassWord\"\n                        type=\"text\" \n                        width=\"85%\" \n                        margin=\"5px 0px 5px 35px\" \n                        _onClick={() => {\n                            document.querySelector('.checkPw').style.display = 'block';\n                        }}\n                        _onChange={(e) => {\n                            changePw(e)\n                        }}/>\n                </Grid>\n                <InfoUl className=\"checkPw\">\n                    <li>10글자 이상 입력</li>\n                    <li>영문/숫자/특수문자(공백 제외)만 허용,2개 이상의 조합</li>\n                    <li>동일한 숫자 3개 이상 연속 사용 불가</li>\n                </InfoUl> \n                <Grid is_flex margin=\"5px 0\">\n                <Input \n                        placeholder=\"PassWord check\"\n                        type=\"text\" \n                        width=\"85%\" \n                        margin=\"5px 0px 5px 35px\" \n                        _onClick={() => {\n                            document.querySelector('.reCheckPw').style.display = 'block';\n                        }}\n                        _onChange={(e) => {\n                            changePwMatch(e)\n                        }}\n                        />\n                </Grid>\n                <InfoUl className=\"reCheckPw\">\n                    <li>동일한 비밀번호를 입력</li>\n                </InfoUl>\n                <Grid is_flexmargin=\"5px 0\">\n                <Input \n                        placeholder=\"Github address\"\n                        type=\"text\" \n                        width=\"85%\" \n                        margin=\"5px 0px 5px 35px\" \n                        _onClick={() =>{ \n                            document.querySelector('.checkGithub').style.display = 'block';\n                        }}\n                        />\n                </Grid>\n                {/*유효성 체크API */}\n                <InfoUl className=\"checkGithub\">\n                    <li>예) https://github.com/<b>본인아이디</b></li>\n                    <li>예)에서 본인아이디(영문,숫자,-)에 해당하는 부분만 입력</li>\n                </InfoUl> \n                </InputWrap>\n            </SignupBody>\n            <SignupBtns>\n                <Button \n                    width=\"40%\" margin=\"10px 0\" alt=\"회원가입\" \n                    radius=\"8px\" size=\"1.2vw\"  color=\"white\" \n                    _onClick={signUp}\n                    >Sign Up</Button>\n                <Button width=\"40%\" margin=\"10px 0\" alt=\"로그인\" \n                radius=\"8px\" size=\"1.2vw\" bg=\"#ffffff\" color=\"#24292e\"\n                _onClick={() => {\n                    history.push('/login');\n                }}\n                >Sign In</Button>\n            </SignupBtns>\n        </SignupWrap>\n        \n        </React.Fragment>\n        \n        \n    );\n};\n\nconst SignupWrap = styled.div`\n    width: 50%;\n    /* margin:-8px auto 15px auto; */\n    margin: 10% auto;\n    padding: 8px;\n    border: 1px solid #24292e ;\n    border-radius: 8px;\n    /* background-color:#f6f8fa; */\n    \n    @media (max-width: 767px){\n\n    }\n\n`;\n\nconst SignupHeader = styled.div`\n\n\n`;\n\nconst Title = styled.div`\n    margin: 50px auto 50px auto;\n    font-size: 2.2vw;\n    font-weight:600;\n    text-align: center;\n\n`;\n\n// const subTitle = styled.div`\n//     margin: 5px auto 10px auto;\n//     font-size: 1.2vw;\n//     color: lightgray;\n//     text-align: center;\n\n// `;\n\nconst SignupBody = styled.div`\n\n`;\n\nconst SignupBtns = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    width:100%;\n    margin: 10px 0px 20px 0px;\n\n`;\n\nconst InputWrap = styled.div`\n    padding: 8px;\n\n`;\n\nconst InfoUl = styled.ul`\n    width:100%;\n    font-size: 0.7vw;\n    color:#666666;\n    position: relative;\n    left:20px;\n    font-weight: 400\n`;\n\n\n\n\nexport default Signup;","/Users/dayoungkim/Desktop/github/git_log/src/elements/Button.js",["140"],"import React from 'react';\nimport styled from 'styled-components';\n\nconst Button = (props) => {\n    const { _onClick, is_float, radius, color, children, margin, width, bg, padding, size, border} =props;\n\n    const styles = {\n        margin:margin,\n        width:width,\n        padding:padding,\n        size: size,\n        radius: radius,\n        bg:bg,\n        border:border,\n        color:color,\n    }\n\n    return (\n        <ElButton onClick={_onClick} {...styles}>\n            {children}\n        </ElButton>\n    );\n};\n\n\nButton.defaultProps = {\n    children:null,\n    _onClick: () => {},\n    margin: false,\n    width: \"100%\",\n    size: \"10px\",\n    padding: \"12px 0px\",\n    radius: \"4px\",\n    bg:\"#24292e\",\n    border:false,\n    color:false,\n}\n\nconst ElButton = styled.button`\n    width: ${(props) => props.width};\n    background-color: ${(props) => props.bg};\n    color: ${(props) => props.color};\n    padding: ${(props) => props.padding};\n    box-sizing: border-box;\n    font-size: ${(props) => props.size};\n    border: ${(props) => props.border};\n    border-radius: ${(props) => props.radius};\n    ${(props) => (props.margin ? `margin: ${props.margin};` : \"\")}\n    :hover{\n        color:#24292e;\n        background-color:#f1e05a;\n        cursor: pointer;\n        outline: none;\n    }\n    \n`;\n\nexport default Button;","/Users/dayoungkim/Desktop/github/git_log/src/redux/modules/post.js",["141","142"],"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\n// actions\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\n\n// actionCreators: createAction\nconst setPost = createAction(SET_POST, (post) => ({ post }));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\n\nconst initialState = {\n  list: [],\n  paging: { start: null, next: null, size: 10 },\n  is_loading: false,\n};\n\nconst initialPost = {\n  imgUrl: \"https://pbs.twimg.com/profile_images/1246486049964068865/PMGeB3d0_400x400.jpg\",\n  uploading: false,\n  preview: null,\n  commentCnt: 0,\n  heartCnt: 0,\n  createdAt: moment().format(\"YYYY-MM-DD hh:mm:ss\"),\n};\n\nconst axiosInstance = axios.create({\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// 메인 페이지: 전체 게시글 목록 조회\n// const getPostAPI = (postId) => {\n//   return function (dispatch, getState, { history }) {\n//     axios\n//       .get(\"/posts?page=0&size=10\", {\n//         data: JSON.stringify({}),\n//       })\n//       .then((response) => response.json())\n//       .then((result) => {\n//         dispatch(setPost(result.data));\n//       })\n//       .catch((err) => {\n//         console.error(err);\n//       });\n//   };\n// };\n\n\n\n// 스토리 페이지 : 해당 유저 게시글 목록 조회\nconst getPostByUserAPI = (userId) => {\n  return function (dispatch, getState, { history }) {\n    axios.get(`/api/post/${userId}`).then((res) => {\n      dispatch(setPost(res.data));\n    });\n  };\n};\n\n\n\nconst getPostAPI = (post) => {\n  return function (dispatch, getState, { history }) {\n    const API = \"http://13.125.167.83/api/posts?page=0&size=10\";\n    axios\n      .get(API)\n      .then((res) => {\n        console.log(res.data.content);\n        // console.log(res.data.pageable);\n        let docs = res.data.content;\n        console.log(docs);\n\n        let post_list = [];\n\n        docs.forEach((doc) => {\n          \n          let post = {\n            id: doc.id,\n            content: doc.content,\n            imgUrl: doc.imgUrl,\n            writerNickname: doc.createdBy,\n            writerProfile: doc.accountResponseDto.profileImgUrl,\n            createdAt: doc.cratedAt,\n            modifiedAt: doc.modifiedAt,\n            commentList: doc.comments,\n            commentCnt: doc.commentCnt,\n            heartCnt: doc.heartCnt,\n          };\n          post_list.unshift(post);\n        });\n\n        console.log(post_list);\n\n        dispatch(setPost(post_list));\n      })\n      .catch((err) => {\n        console.error(\"게시물을 가져오는데 문제가 있습니다\", err);\n      });\n  };\n};\n\n\n// 게시물 등록하기\n// const addPostAPI = (content=\"\") => {\n//   return function (dispatch, getState, { history }) {\n    \n//         const _post = {\n//           ...initialPost,\n//           content:content,\n//           createdAt: moment().format(\"YYYY-MM-DD hh:mm:ss\"),  //initalPost에 있지만 그 시점마다 업데이트 해줘야 하니까\n//           // heartCnt:0,\n//           // heartId: [],\n//         };\n\n//         // const _image =  getState().image.preview;\n\n\n//         axios.post(\"http://13.125.167.83/api/posts\")\n//           .then((res) => {\n//         dispatch(addPost());\n//         history.push(\"/\");\n//       })\n//       .catch((err) => {\n//         console.error(\"작성 실패\", err);\n//       });\n//   };\n// };\n\n// 게시물 삭제하기\nconst deletePost = (postId) => {\n  return function (dispatch, getState, { history }) {\n    axios.delete(`/api/post/${postId}`).then((res) => {\n      history.push(\"/\");\n    });\n  };\n};\n\n// 게시물 수정하기\nconst updatePost = (postId, post) => {\n  return function (dispatch, getState, { history }) {\n    axios.put(`/api/post/${postId}`, post).then((res) => {\n      history.push(\"/\");\n    });\n  };\n};\n\n// 좋아요 기능 추가++++ : likePost, dislikePost\n\n// reducer: handleActions\nexport default handleActions(\n  {\n    [ADD_POST]: (state, action) => produce(state, (draft) => {\n        draft.list.unshift(action.payload.post);\n      }),\n    [SET_POST]: (state, action) => produce(state, (draft) => {\n        draft.list = action.payload.post;\n        console.log(draft.list);\n      }),\n  },\n  initialState\n);\n\n// actionCreator export\nconst actionCreators = {\n  addPost,\n  setPost,\n  getPostAPI,\n  getPostByUserAPI,\n  // addPostAPI,\n  deletePost,\n  updatePost,\n};\n\nexport { actionCreators };\n","/Users/dayoungkim/Desktop/github/git_log/src/pages/PostWrite.js",["143","144","145","146","147","148","149","150","151","152","153","154"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport { Grid, Text, Button, Input, Image } from \"../elements/index\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\nimport { actionCreators as imageActions } from \"../redux/modules/image\";\nimport { history } from \"../redux/configureStore\";\n\nimport Upload from \"../shared/Upload\";\n\nimport preview_empty from \"../static/preview_empty.png\";\n\nconst PostWrite = () => {\n  const dispatch = useDispatch();\n  const is_login = useSelector((state) => state.user.is_login);\n  const post_list = useSelector((state) => state.post.list);\n  const preview = useSelector((state) => state.image.preview);\n  // is_uploading = useSelector((state) => state.image.uploading);\n\n  // // 게시글 사진\n  const image_ref = React.useRef(\"\");\n\n  const selectFile = (e) => {\n    // changed 된 event (e.target은 input)\n    console.log(e.target.files); // input 이 가진 files 객체\n    console.log(e.target.files[0]); //선택한 파일이 어떻게 저장되어 있나 확인\n    console.log(image_ref.current.files[0]); //ref로도 확인;\n  }\n  //   const reader = new FileReader();\n  //   const file = fileInput.current.files[0];\n\n  //   reader.readAsDataURL(); // readAsDataURL(읽고 싶은 파일) 메서드를 이용한다.\n  //   reader.onloadend = () => {\n  //     // onloadend: reader가 끝나자마자 다음 것을 수행한다.\n  //     console.log(reader.result);\n  //     dispatch(imageActions.setPreview(reader.result));\n  //   };\n  // };\n\n  // // 게시글 내용\n  // const [content, setContent] = React.useState(\"\");\n  // const changeContent = (e) => {\n  //   setContent(e.target.value);\n  // };\n\n  // const addPost = () => {\n  //   let post = { contet : content };\n\n  //   dispatch(postActions.addPostAPI(content));\n  //   dispatch(postActions.uploadImageAPI(fileInput.current.files[0]));\n  // };\n\n  const content = React.useRef(\"\");\n \n  const addPost = () => {\n    let imgUrl=image_ref.current.files[0]\n    const form = new FormData();\n    form.append(\"content\", content.current.value);\n    form.append(\"imgUrl\", imgUrl.current.value);\n    for (var key of form.keys()) {\n      console.log(key);\n    }\n\n    axios({\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: \"Bearer\" + localStorage.getItem(\"jwt\"),\n      },\n      url: \"http://15.165.77.77:8080/api/boards\",\n      data: form,\n    })\n      .then((response) => {\n        console.log(response);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    history.push(\"/\");\n  };\n\n  //   if (!is_login) {\n  //     return (\n  //       <Grid margin=\"100px 0px\" padding=\"16px\" center>\n  //         <Text size=\"16px\">로그인 후 글을 쓸 수 있어요</Text>\n  //         <Button\n  //           _onClick={() => {\n  //             history.replace(\"/login\");\n  //           }}\n  //         >\n  //           로그인 하러가기\n  //         </Button>\n  //       </Grid>\n  //     );\n  //   }\n\n  return (\n    <React.Fragment>\n      <h2>게시글 작성</h2>\n      <input type=\"file\" ref={image_ref} />\n      <Grid flex margin=\"20px 0px\">\n        <Grid>\n          <Preview\n            // src={preview ? preview : src={preview_empty}}\n            src={preview_empty}\n          />\n        </Grid>\n        <Grid>\n          <Grid>\n            <ContentInput\n              rows={16}\n              label=\"게시글 내용\"\n              placeholder=\"내용을 입력해주세요\"\n              // onChange={changeContent}\n              ref={content}\n            />\n          </Grid>\n          <Grid>\n            <SubmitBtn onClick={addPost}>게시글 업로드</SubmitBtn>\n          </Grid>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nconst Preview = styled.div`\n  width: 84%;\n  aspect-ratio: 1/1;\n  position: relative;\n  overflow: hidden;\n  background-image: url(\"${(props) => props.src}\");\n  background-size: cover;\n  padding: 12px;\n`;\n\nconst ContentInput = styled.textarea`\n  border: 1px solid #212121;\n  width: 100%;\n  padding: 12px 4px;\n  box-sizing: border-box;\n`;\n\nconst SubmitBtn = styled.button`\n  width: 100%;\n  height: 40px;\n  padding: 12px 4px;\n  box-sizing: border-box;\n  border: none;\n  margin-top: 10px;\n`;\n\nexport default PostWrite;\n","/Users/dayoungkim/Desktop/github/git_log/src/shared/common.js",["155","156","157"],"\n//nickname 체크 정규식\nexport const nickNameCheck = (nickName) =>{\n\n    const _reg =/^(?!(?:[0-9]+)$)([a-zA-Z]|[0-9a-zA-Z]){6,}$/;\n    return _reg.test(nickName);\n}\n\n//패스워드 확인 정규식\nexport const pwMatch = (pw) => {\n\n    const _reg = /^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{10,}$/;\n    return  _reg.test(pw) && pw.search(/\\s/) == -1 ? true : false;\n}\n\nexport const pwContinuous = (pw) => {\n\n    const _reg = /(\\w)\\1\\1/;\n    return _reg.test(pw)\n}\n\n\n//이메일 체크 정규식\nexport const emailCheck = (email) => {\n\n    let _reg=/^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i;\n    return _reg.test(email);\n\n}\n\n","/Users/dayoungkim/Desktop/github/git_log/src/redux/modules/user.js",[],"/Users/dayoungkim/Desktop/github/git_log/src/redux/modules/image.js",["158","159"],"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nconst initialState ={\n    image_url: \"\",\n    uplaoding: false,\n    preview: null,\n};\n\n// actions\nconst UPLOAD_IMAGE = \"UPLOAD_IMAGE\";\nconst UPLOADING = \"UPLOADING\";\nconst SET_PREVIEW = \"SET_PREVIEW\";\n \n// actionCreators: createAction\nconst uploadImage = createAction(UPLOAD_IMAGE, (image_url) => ({ image_url }));\nconst uploading = createAction(UPLOADING, (uploading) => ({ uploading }));\nconst setPreview = createAction(SET_PREVIEW, (preview) => ({ preview }));\n\n// middleware\n\n\n\n// reducer: handleActions\nexport default handleActions(\n    {\n        [UPLOAD_IMAGE]: (state, action) =>\n        produce(state, (draft) => {\n            draft.image_url = action.payload.image_url;\n        }),\n        [UPLOADING]: (state, action) =>\n        produce(state, (draft) => {\n            draft.uploading = action.payload.uplaoding;\n        }),\n        [SET_PREVIEW]: (state, action) =>\n        produce(state, (draft) => {\n            draft.preview = action.payload.preview;\n        }),\n    },\n    initialState\n);\n\nconst actionCreators = {\n    uploadImage,\n    setPreview,\n    uploading,\n};\n\nexport { actionCreators };","/Users/dayoungkim/Desktop/github/git_log/src/shared/Upload.js",["160","161","162","163","164"],"import React from \"react\";\nimport { Grid, Button } from \"../elements\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actionCreators as imageActions } from \"../redux/modules/image\";\nimport axios from \"axios\";\n\nconst Upload = (props) => {\n\n    const fileInput = React.useRef();\n\n    const selectFile = (e) => {\n        console.log(e.target.files);\n        console.log(e.target.files[0]);\n        console.log(fileInput.current.files[0]);\n    };\n\n    const uploadAPI = () => {\n        let image = fileInput.current?.files[0];\n        \n        axios\n        .post(\"\", {\n            image: fileInput,\n        }).then((res) => {\n\n        });\n    }\n    \n    return (\n        <React.Fragment>\n            <input type=\"file\" \n            ref={fileInput} \n            onChange={selectFile} />\n            <Button _onClick={uploadAPI}>업로드하기</Button>\n        </React.Fragment>\n    );\n}\n\nexport default Upload;","/Users/dayoungkim/Desktop/github/git_log/src/components/PostList/CommentItem.js",["165","166"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { Grid, Image, Text, Input } from \"../../elements\";\n\n\nconst CommentItem = (props) => {\n\n  return (\n    <React.Fragment>\n        <div flex-direction=\"column\">\n        <Grid flex>\n          <ProfileImg src={props.user_info.profile} />\n          <Text bold>{props.user_info.nickname}</Text>\n        </Grid>\n        <Grid>\n        <Text margin=\"0px\">{props.comment}</Text>\n        </Grid>\n      </div>\n    </React.Fragment>\n  );\n};\n\nCommentItem.defaultProps = {\n  user_info: {\n    nickname: \"_nickname\",\n    profile:\n      \"https://blog.kakaocdn.net/dn/cyOIpg/btqx7JTDRTq/1fs7MnKMK7nSbrM9QTIbE1/img.jpg\",\n  },\n  comment: \"댓글입니다 :)\",\n};\n\nconst ProfileImg = styled.img`\n  width: 9%;\n  aspect-ratio: 1/1;\n  border-radius:100px;\n  background-image: url(\"${(props) => props.src}\");\n  margin-right: 5px;\n`;\n\n\nexport default CommentItem;\n",{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":7,"column":10,"nodeType":"173","messageId":"174","endLine":7,"endColumn":14},{"ruleId":"171","severity":1,"message":"175","line":7,"column":16,"nodeType":"173","messageId":"174","endLine":7,"endColumn":22},{"ruleId":"171","severity":1,"message":"176","line":7,"column":9,"nodeType":"173","messageId":"174","endLine":7,"endColumn":14},{"ruleId":"171","severity":1,"message":"177","line":2,"column":16,"nodeType":"173","messageId":"174","endLine":2,"endColumn":20},{"ruleId":"171","severity":1,"message":"178","line":2,"column":22,"nodeType":"173","messageId":"174","endLine":2,"endColumn":27},{"ruleId":"171","severity":1,"message":"179","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":14},{"ruleId":"171","severity":1,"message":"180","line":4,"column":10,"nodeType":"173","messageId":"174","endLine":4,"endColumn":18},{"ruleId":"171","severity":1,"message":"181","line":4,"column":20,"nodeType":"173","messageId":"174","endLine":4,"endColumn":29},{"ruleId":"182","severity":1,"message":"183","line":22,"column":8,"nodeType":"184","endLine":22,"endColumn":10,"suggestions":"185"},{"ruleId":"171","severity":1,"message":"186","line":6,"column":8,"nodeType":"173","messageId":"174","endLine":6,"endColumn":13},{"ruleId":"171","severity":1,"message":"180","line":8,"column":10,"nodeType":"173","messageId":"174","endLine":8,"endColumn":18},{"ruleId":"171","severity":1,"message":"181","line":8,"column":20,"nodeType":"173","messageId":"174","endLine":8,"endColumn":29},{"ruleId":"171","severity":1,"message":"187","line":9,"column":10,"nodeType":"173","messageId":"174","endLine":9,"endColumn":21},{"ruleId":"171","severity":1,"message":"188","line":9,"column":23,"nodeType":"173","messageId":"174","endLine":9,"endColumn":34},{"ruleId":"171","severity":1,"message":"189","line":10,"column":8,"nodeType":"173","messageId":"174","endLine":10,"endColumn":12},{"ruleId":"171","severity":1,"message":"190","line":10,"column":34,"nodeType":"173","messageId":"174","endLine":10,"endColumn":45},{"ruleId":"191","severity":1,"message":"192","line":23,"column":11,"nodeType":"193","endLine":23,"endColumn":66},{"ruleId":"171","severity":1,"message":"177","line":4,"column":15,"nodeType":"173","messageId":"174","endLine":4,"endColumn":19},{"ruleId":"171","severity":1,"message":"194","line":3,"column":8,"nodeType":"173","messageId":"174","endLine":3,"endColumn":14},{"ruleId":"171","severity":1,"message":"195","line":4,"column":9,"nodeType":"173","messageId":"174","endLine":4,"endColumn":21},{"ruleId":"171","severity":1,"message":"177","line":6,"column":15,"nodeType":"173","messageId":"174","endLine":6,"endColumn":19},{"ruleId":"171","severity":1,"message":"178","line":6,"column":21,"nodeType":"173","messageId":"174","endLine":6,"endColumn":26},{"ruleId":"171","severity":1,"message":"196","line":14,"column":21,"nodeType":"173","messageId":"174","endLine":14,"endColumn":35},{"ruleId":"171","severity":1,"message":"197","line":16,"column":8,"nodeType":"173","messageId":"174","endLine":16,"endColumn":15},{"ruleId":"171","severity":1,"message":"198","line":18,"column":18,"nodeType":"173","messageId":"174","endLine":18,"endColumn":29},{"ruleId":"171","severity":1,"message":"199","line":19,"column":16,"nodeType":"173","messageId":"174","endLine":19,"endColumn":25},{"ruleId":"171","severity":1,"message":"200","line":5,"column":23,"nodeType":"173","messageId":"174","endLine":5,"endColumn":31},{"ruleId":"171","severity":1,"message":"201","line":20,"column":7,"nodeType":"173","messageId":"174","endLine":20,"endColumn":18},{"ruleId":"171","severity":1,"message":"202","line":29,"column":7,"nodeType":"173","messageId":"174","endLine":29,"endColumn":20},{"ruleId":"171","severity":1,"message":"177","line":4,"column":16,"nodeType":"173","messageId":"174","endLine":4,"endColumn":20},{"ruleId":"171","severity":1,"message":"175","line":4,"column":22,"nodeType":"173","messageId":"174","endLine":4,"endColumn":28},{"ruleId":"171","severity":1,"message":"203","line":4,"column":30,"nodeType":"173","messageId":"174","endLine":4,"endColumn":35},{"ruleId":"171","severity":1,"message":"178","line":4,"column":37,"nodeType":"173","messageId":"174","endLine":4,"endColumn":42},{"ruleId":"171","severity":1,"message":"190","line":7,"column":28,"nodeType":"173","messageId":"174","endLine":7,"endColumn":39},{"ruleId":"171","severity":1,"message":"204","line":8,"column":28,"nodeType":"173","messageId":"174","endLine":8,"endColumn":40},{"ruleId":"171","severity":1,"message":"205","line":11,"column":8,"nodeType":"173","messageId":"174","endLine":11,"endColumn":14},{"ruleId":"171","severity":1,"message":"206","line":16,"column":9,"nodeType":"173","messageId":"174","endLine":16,"endColumn":17},{"ruleId":"171","severity":1,"message":"207","line":17,"column":9,"nodeType":"173","messageId":"174","endLine":17,"endColumn":17},{"ruleId":"171","severity":1,"message":"208","line":18,"column":9,"nodeType":"173","messageId":"174","endLine":18,"endColumn":18},{"ruleId":"171","severity":1,"message":"209","line":19,"column":9,"nodeType":"173","messageId":"174","endLine":19,"endColumn":16},{"ruleId":"171","severity":1,"message":"210","line":25,"column":9,"nodeType":"173","messageId":"174","endLine":25,"endColumn":19},{"ruleId":"211","severity":1,"message":"212","line":13,"column":46,"nodeType":"213","messageId":"214","endLine":13,"endColumn":48},{"ruleId":"215","severity":1,"message":"216","line":26,"column":31,"nodeType":"217","messageId":"218","endLine":26,"endColumn":32,"suggestions":"219"},{"ruleId":"215","severity":1,"message":"216","line":26,"column":64,"nodeType":"217","messageId":"218","endLine":26,"endColumn":65,"suggestions":"220"},{"ruleId":"171","severity":1,"message":"221","line":3,"column":8,"nodeType":"173","messageId":"174","endLine":3,"endColumn":13},{"ruleId":"171","severity":1,"message":"222","line":4,"column":8,"nodeType":"173","messageId":"174","endLine":4,"endColumn":14},{"ruleId":"171","severity":1,"message":"172","line":2,"column":10,"nodeType":"173","messageId":"174","endLine":2,"endColumn":14},{"ruleId":"171","severity":1,"message":"187","line":4,"column":10,"nodeType":"173","messageId":"174","endLine":4,"endColumn":21},{"ruleId":"171","severity":1,"message":"188","line":4,"column":23,"nodeType":"173","messageId":"174","endLine":4,"endColumn":34},{"ruleId":"171","severity":1,"message":"204","line":5,"column":28,"nodeType":"173","messageId":"174","endLine":5,"endColumn":40},{"ruleId":"171","severity":1,"message":"223","line":19,"column":13,"nodeType":"173","messageId":"174","endLine":19,"endColumn":18},{"ruleId":"171","severity":1,"message":"178","line":3,"column":16,"nodeType":"173","messageId":"174","endLine":3,"endColumn":21},{"ruleId":"171","severity":1,"message":"203","line":3,"column":29,"nodeType":"173","messageId":"174","endLine":3,"endColumn":34},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'theme' is assigned a value but never used.","'Text' is defined but never used.","'Image' is defined but never used.","'styled' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["226"],"'Count' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'post' is defined but never used.","'postActions' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'signup' is defined but never used.","'AiFillGithub' is defined but never used.","'setNicknameDup' is assigned a value but never used.","'pwCheck' is assigned a value but never used.","'setEmailDup' is assigned a value but never used.","'setGithub' is assigned a value but never used.","'is_float' is assigned a value but never used.","'initialPost' is assigned a value but never used.","'axiosInstance' is assigned a value but never used.","'Input' is defined but never used.","'imageActions' is defined but never used.","'Upload' is defined but never used.","'dispatch' is assigned a value but never used.","'is_login' is assigned a value but never used.","'post_list' is assigned a value but never used.","'preview' is assigned a value but never used.","'selectFile' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["227","228"],["229","230"],"'axios' is defined but never used.","'moment' is defined but never used.","'image' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"231","fix":"232"},{"messageId":"233","fix":"234","desc":"235"},{"messageId":"236","fix":"237","desc":"238"},{"messageId":"233","fix":"239","desc":"235"},{"messageId":"236","fix":"240","desc":"238"},"Update the dependencies array to be: [dispatch]",{"range":"241","text":"242"},"removeEscape",{"range":"243","text":"244"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"245","text":"246"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"247","text":"244"},{"range":"248","text":"246"},[567,569],"[dispatch]",[522,523],"",[522,522],"\\",[555,556],[555,555]]